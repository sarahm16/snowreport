const { client } = require('./base')

const fs = require('fs')
const path = require('path')
const Anvil = require('../src/index')

// const argv = require('yargs')
//   .usage('Usage: $0 path/to/file.pdf')
//   .demandCommand(1).argv

// const [filePath] = argv._

const etchPacketEID = 'eDAHYUxMTO1HY8G9F1im'
const weldDataEID = 'LyBdi0JcOV9MgyDNBpQO'

const textFile = path.resolve(__dirname, 'text.txt')
const mimeTxt = 'text/plain'

const mimeXml1 = 'application/xml'
const mimeXml2 = 'text/xml'

const xmlFile = path.resolve(__dirname, 'note.xml')
const sneakyXmlFile = path.resolve(__dirname, 'xml-not.txt')

const svgFile = path.resolve(__dirname, 'logo-mark.svg')
const sneakySvgFile = path.resolve(__dirname, 'svg-not.jpg')
const secretlySvgFile = path.resolve(__dirname, 'svgsecretly')

const mimeJpg = 'image/jpg'
const jpgFile = path.resolve(__dirname, 'excellent.png')

const pdfFile = path.resolve(__dirname, 'anvil-finovate-non-qualified.pdf')
const mimePdf = 'application/pdf'

let formDataAppendOptions = {
  contentType: 'image/jpg',
}

async function run () {
  const examples = [
    {
      msg: 'Should not error',
      filePath: pdfFile,
    },
    // {
    //   msg: 'Uh oh, it looks like something is wrong with this file. Please ensure the file extension has not been changed.',
    //   filePath: pdfFile,
    //   formDataAppendOptions: {
    //     contentType: mimeJpg,
    //   },
    // },
    // {
    //   msg: 'Filenames with .xml extensions are not allowed',
    //   filePath: jpgFile,
    //   formDataAppendOptions: {
    //     filename: 'excellent.xml',
    //   },
    // },
    // {
    //   msg: 'Files of type xml are not allowed.',
    //   filePath: xmlFile,
    // },
    // {
    //   msg: 'Sneaky files of type xml are not allowed.',
    //   filePath: sneakyXmlFile,
    //   formDataAppendOptions: {
    //     // filename: 'excellent.xml',
    //     contentType: mimeJpg,
    //   },
    // },
    // {
    //   msg: 'Sneaky files of type xml without extension are not allowed.',
    //   filePath: sneakyXmlFile,
    //   formDataAppendOptions: {
    //     filename: 'svg-without-extension',
    //     contentType: mimeJpg,
    //   },
    // },
    // {
    //   msg: 'Declared SVGs are not allowed',
    //   filePath: svgFile,
    // },
    // {
    //   msg: 'Sneaky SVGs are not allowed',
    //   filePath: sneakySvgFile,
    //   formDataAppendOptions: {
    //     filename: 'whatami',
    //     // contentType: mimeJpg,
    //   },
    // },
    // {
    //   msg: 'Secret SVGs are not allowed',
    //   filePath: secretlySvgFile,
    //   // formDataAppendOptions: {
    //   //   // filename: 'whatami',
    //   //   // contentType: mimeJpg,
    //   // },
    // },
    // {
    //   msg: 'File extension is determined to be JPG.',
    //   filePath: jpgFile,
    //   formDataAppendOptions: {
    //     filename: 'excellent',
    //   },
    // },
    // {
    //   msg: 'Undetectable file type...should pass, but get uploaded to Google with octet',
    //   // filePath: textFile,
    //   filePath: sneakySvgFile,
    //   formDataAppendOptions: {
    //     contentType: mimeTxt,
    //     // contentType: 'foo/bar',
    //   },
    // },
  ]

  for (const example of examples) {
    const {
      msg,
      eid = weldDataEID,
      filePath,
      formDataAppendOptions,
    } = example

    const file = Anvil.prepareGraphQLFile(filePath, formDataAppendOptions)

    const response = await client.uploadFile({ variables: { eid, file } })
    const {
      statusCode,
      data,
      errors,
    } = response

    console.log(msg)
    // console.log(response)
    console.log({ statusCode, errors })
    console.log(JSON.stringify(data))
    console.log('\n\n')
  }
}

console.log('\n\n')
run()
  .then(() => {
    process.exit(0)
  })
  .catch((err) => {
    console.log(err.stack || err.message)
    process.exit(1)
  })
